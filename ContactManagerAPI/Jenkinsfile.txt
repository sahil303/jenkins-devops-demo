pipeline {
    agent any
    environment {
        STAGING_SERVER = 'staging-server'
        PRODUCTION_SERVER = 'production-server'
    }

    stages {
        stage('Checkout') {
        agent { label 'build-node' }
            steps {
                git url: 'https://github.com/sahil303/jenkins-devops-demo.git', branch: 'main'
            }
        }

        stage('Restore') {
        agent { label 'build-node' }
            steps {
                echo 'Restoring .NET dependencies...'
                bat 'dotnet restore ContactManagerAPI\\ContactManagerAPI.sln'
            }
        }

        stage('Build') {
            agent { label 'build-node' }
            steps {
                bat 'dotnet clean ContactManagerAPI\\ContactManagerAPI.sln'
                bat 'dotnet build --configuration Release ContactManagerAPI\\ContactManagerAPI.sln -maxcpucount:1'
            }
        }

        stage('Test') {
            agent { label 'test-node' }
            steps {
                bat 'dotnet test --verbosity normal ContactManagerAPI\\ContactManagerAPI.sln'
            }
        }

        stage('Prepare Environments') {
            steps {

                echo 'Creating Staging and Production directories if not exist...'

                bat '''
                if not exist C:\\Deployments\\StagingEnv\\ContactManagerAPI (
                    mkdir C:\\Deployments\\StagingEnv\\ContactManagerAPI
                )
                if not exist C:\\Deployments\\ProductionEnv\\ContactManagerAPI (
                    mkdir C:\\Deployments\\ProductionEnv\\ContactManagerAPI
                )
                '''
            }
        }

        stage('Deploy to Staging') {
         agent { label 'stage-node' }
            steps {
                echo 'Deploying to Staging environment...'
                bat 'xcopy /E /I /Y ContactManagerAPI\\bin\\Release\\net8.0 C:\\Deployments\\StagingEnv\\ContactManagerAPI'
            }
        }

                 
        stage('Deploy to Production') {
        agent { label 'production-node' }
            when {
                branch 'main'
            }
            steps {
                input message: 'Approve deployment to Production?'
                echo 'Deploying to Production environment...'
                bat 'dotnet publish --configuration Release --output C:\Deployments\ProductionEnv\ContactManagerAPI'
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Please check the logs.'
        }
    }
}
